legend.key = element_rect(fill = "white", colour = "black"),
legend.background = (element_rect(colour= "black", fill = "white")),
axis.title.x = element_text( colour="black", size=20),
axis.title.y = element_text( colour = "black", size = 20),
plot.title = element_text(lineheight=.8,  size = 20),
axis.ticks.length=unit(.25, "cm"),
text = element_text(size=20))+
labs(titles = "Total Treg Counts", x = "Age in days", y = "Cell Counts")+
scale_y_continuous(limits = c(0,820000))
# Thymic Tregs
ThymicTregKO = ggplot(KOData, aes(x=hours, y=ThymicDerivedTregsCT)) + geom_point(size = dotsize) +
stat_summary(fun=mean, colour="black", geom="line", linetype="dotted", lwd = Dotedline)+
geom_line(data = ModeldataKO, aes(x = time, y=ThyTregs), colour = "black", lwd = simLine)+
theme(panel.background = element_rect(fill = "white", colour = "black", size = 2),
legend.key = element_rect(fill = "white", colour = "black"),
legend.background = (element_rect(colour= "black", fill = "white")),
axis.title.x = element_text( colour="black", size=20),
axis.title.y = element_text( colour = "black", size = 20),
plot.title = element_text(lineheight=.8,  size = 20),
axis.ticks.length=unit(.25, "cm"),
text = element_text(size=20))+
labs(titles = "Thymic Derived Tregs", x = "Age in days", y = "Cell Counts")+
scale_y_continuous(limits = c(0,820000))
#Naive Derived Tregs
NaiveTregKO = ggplot(KOData, aes(x=hours, y=NaiveDerivedTregsCT)) + geom_point(size = dotsize) +
stat_summary(fun=mean, colour="black", geom="line", linetype="dotted", lwd = Dotedline)+
geom_line(data = ModeldataKO, aes(x = time, y=TregNaive), colour = "black", lwd = simLine)+
theme(panel.background = element_rect(fill = "white", colour = "black", size = 2),
legend.key = element_rect(fill = "white", colour = "black"),
legend.background = (element_rect(colour= "black", fill = "white")),
axis.title.x = element_text( colour="black", size=20),
axis.title.y = element_text( colour = "black", size = 20),
plot.title = element_text(lineheight=.8,  size = 20),
axis.ticks.length=unit(.25, "cm"),
text = element_text(size=20))+
labs(titles = "Peripherally Derived Tregs", x = "Age in days", y = "Cell Counts")+
scale_y_continuous(limits = c(0,820000))
#Proliferating Tregs
ProlTregKO = ggplot(ProlKOData, aes(x=hours, y=X4TregProlCT)) + geom_point(size = dotsize) +
stat_summary(fun=mean, colour="black", geom="line", linetype="dotted", lwd = Dotedline)+
geom_line(data = ModeldataKO, aes(x = time, y=ProlTreg), colour = "black", lwd = simLine)+
theme(panel.background = element_rect(fill = "white", colour = "black", size = 2),
legend.key = element_rect(fill = "white", colour = "black"),
legend.background = (element_rect(colour= "black", fill = "white")),
axis.title.x = element_text( colour="black", size=20),
axis.title.y = element_text( colour = "black", size = 20),
plot.title = element_text(lineheight=.8,  size = 20),
axis.ticks.length=unit(.25, "cm"),
text = element_text(size=20))+
labs(titles = "Proliferating Tregs", x = "Age in days", y = "Cell Counts")+
scale_y_continuous(limits = c(0,820000))
#--------------------------------------------------------#
#--------------- Break plot Piece
ProlTregKO_Break = ggplot(ProlKOData, aes(x=hours, y=X4TregProlCT)) + geom_point(size = dotsize) +
stat_summary(fun=mean, colour="black", geom="line", linetype="dotted", lwd = Dotedline)+
geom_line(data = ModeldataKO, aes(x = time, y=ProlTreg), colour = "black", lwd = simLine)+
theme(panel.background = element_rect(fill = "white", colour = "black", size = 2),
legend.key = element_rect(fill = "white", colour = "black"),
legend.background = (element_rect(colour= "black", fill = "white")),
axis.title.x = element_text( colour="black", size=20),
axis.title.y = element_text( colour = "black", size = 20),
plot.title = element_text(lineheight=.8,  size = 20),
axis.ticks.length=unit(.25, "cm"),
text = element_text(size=20))+
labs(titles = "Proliferating Tregs", x = "Age in days", y = "Cell Counts")+
scale_y_continuous(limits = c(0,850000))+
scale_y_break(c(400000, 800000))
#--------------------------------------------------------#
########################
########################
##### The ggsave #######
########################
########################
#---------------#
#------3A-------#
#---------------#
NaivePlots = ggarrange(NaiveCTWT, ProlNaiveWT, ThymicNaiveWT, NaiveCTKO, ProlNaiveKO, ThymicNaiveKO,
labels = c("A"),
ncol = 3, nrow = 2)
ggsave(file = "C:/Laptop Backups/HomestaticExpansionProject/Figures/ForPaper/Figure3/Figure3A.pdf", NaivePlots,
height = ht,
width = wdt)
ggsave(file = "C:/Laptop Backups/HomestaticExpansionProject/Figures/ForPaper/Figure3/TotalNaive.pdf", TotalNaiveOverlap,
height = ht,
width = wdt)
#---------------#
#------3B-------#
#---------------#
ActTPlots = ggarrange(ActTCD4CTWT, ProlActTWT, NaiveActTWT, ActTCD4CTKO, ProlActTKO, NaiveActTKO,
labels = c("B"),
ncol = 3, nrow = 2)
ggsave(file = "C:/Laptop Backups/HomestaticExpansionProject/Figures/ForPaper/Figure3/Figure3B.pdf", ActTPlots,
height = ht,
width = wdt)
#Simulation comparison
ggsave(file = "C:/Laptop Backups/HomestaticExpansionProject/Figures/ForPaper/Figure3/Overlap.pdf", NaiveActTOverlap)
#---------------#
#------3C-------#
#---------------#
TregPlots = ggarrange(TregCTWT, ThymicTregWT, NaiveTregWT, ProlTregWT, TregCTKO, ThymicTregKO, NaiveTregKO, ProlTregKO,
labels = c("C"),
ncol = 4, nrow = 2)
ggsave(file = "C:/Laptop Backups/HomestaticExpansionProject/Figures/ForPaper/Figure3/Figure3C.pdf", TregPlots,
height = ht,
width = 19.8)
#the broken KO plot
ggsave(file = "C:/Laptop Backups/HomestaticExpansionProject/Figures/ForPaper/Figure3/ProlTregKO_Break.pdf", ProlTregKO_Break,
height = ht,
width = wdt)
ht
ggsave(file = "C:/Laptop Backups/HomestaticExpansionProject/Figures/ForPaper/Figure3/Figure3A.pdf", NaivePlots,
height = 9,
width = wdt)
wdt
ggsave(file = "C:/Laptop Backups/HomestaticExpansionProject/Figures/ForPaper/Figure3/Figure3A.pdf", NaivePlots,
height = 9,
width = 14.65)
ggsave(file = "C:/Laptop Backups/HomestaticExpansionProject/Figures/ForPaper/Figure3/Figure3A.pdf", NaivePlots,
height = 9,
width = 14.7)
ggsave(file = "C:/Laptop Backups/HomestaticExpansionProject/Figures/ForPaper/Figure3/Figure3A.pdf", NaivePlots,
height = 9,
width = 14.8)
ggsave(file = "C:/Laptop Backups/HomestaticExpansionProject/Figures/ForPaper/Figure3/Figure3A.pdf", NaivePlots,
height = 9,
width = 14.75)
wdt
ggsave(file = "C:/Laptop Backups/HomestaticExpansionProject/Figures/ForPaper/Figure3/Figure3B.pdf", ActTPlots,
height = ht,
width = 14.75)
ht
ggsave(file = "C:/Laptop Backups/HomestaticExpansionProject/Figures/ForPaper/Figure3/Figure3B.pdf", ActTPlots,
height = 8.3,
width = 14.8)
ggsave(file = "C:/Laptop Backups/HomestaticExpansionProject/Figures/ForPaper/Figure3/Figure3B.pdf", ActTPlots,
height = 8.3,
width = 14.75)
ggsave(file = "C:/Laptop Backups/HomestaticExpansionProject/Figures/ForPaper/Figure3/Figure3B.pdf", ActTPlots,
height = 8.3,
width = 14.8)
ggsave(file = "C:/Laptop Backups/HomestaticExpansionProject/Figures/ForPaper/Figure3/Figure3B.pdf", ActTPlots,
height = 8.3,
width = 14.83)
ggsave(file = "C:/Laptop Backups/HomestaticExpansionProject/Figures/ForPaper/Figure3/Figure3B.pdf", ActTPlots,
height = 8.3,
width = 14.85)
ggsave(file = "C:/Laptop Backups/HomestaticExpansionProject/Figures/ForPaper/Figure3/Figure3B.pdf", ActTPlots,
height = 8.3,
width = 14.9)
ggsave(file = "C:/Laptop Backups/HomestaticExpansionProject/Figures/ForPaper/Figure3/Figure3B.pdf", ActTPlots,
height = 8.3,
width = 14.95)
wdt
ht
ggsave(file = "C:/Laptop Backups/HomestaticExpansionProject/Figures/ForPaper/Figure3/TotalNaive.pdf", TotalNaiveOverlap,
height = 8.3,
width = 12)
ggsave(file = "C:/Laptop Backups/HomestaticExpansionProject/Figures/ForPaper/Figure3/TotalNaive.pdf", TotalNaiveOverlap,
height = 8.3,
width = 8.3)
ggsave(file = "C:/Laptop Backups/HomestaticExpansionProject/Figures/ForPaper/Figure3/TotalNaive.pdf", TotalNaiveOverlap,
height = 8.3,
width = 10)
#Total Naive Overlap
TotalNaiveOverlap = ggplot(data=ModeldataWT, aes(x=time, y=NaiveCT)) +
geom_line(lwd = simLine)+
geom_line(data = ModeldataKO, aes(x = time, y=NaiveCT), linetype = "dashed", colour = "black", lwd = simLine)+
theme(panel.background = element_rect(fill = "white", colour = "black", size = 2),
legend.key = element_rect(fill = "white", colour = "black"),
legend.background = (element_rect(colour= "black", fill = "white")),
axis.title.x = element_text( colour="black", size=20),
axis.title.y = element_text( colour = "black", size = 20),
plot.title = element_text(lineheight=.8,  size = 20),
axis.ticks.length=unit(.25, "cm"),
text = element_text(size=20))+
labs(titles = "Total Naive T cells Comparison ", x = "Age in days", y = "Cell Counts")
ggsave(file = "C:/Laptop Backups/HomestaticExpansionProject/Figures/ForPaper/Figure3/TotalNaive.pdf", TotalNaiveOverlap,
height = 8.3,
width = 10)
#Simulation comparison
ggsave(file = "C:/Laptop Backups/HomestaticExpansionProject/Figures/ForPaper/Figure3/Overlap.pdf",
height = 8.3,
width = 10)
NaiveActTOverlap
#Simulation comparison
ggsave(file = "C:/Laptop Backups/HomestaticExpansionProject/Figures/ForPaper/Figure3/Overlap.pdf", NaiveActTOverlap)
#Simulation comparison
ggsave(file = "C:/Laptop Backups/HomestaticExpansionProject/Figures/ForPaper/Figure3/Overlap.pdf", NaiveActTOverlap,
height = 8.3,
width = 10)
library("ggplot2")
library(ggplot2)
library(MASS)
library(scales)
library(ggpubr)
WTevery = read.csv("C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/Data/ModelOutputEverythingWT.csv")
KOevery = read.csv("C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/Data/ModelOutputEverythingKO.csv")
ggplot() +
geom_line(data=WTevery, aes(x=hour, y=TregCT), lwd = lineWT)+
geom_line(data=KOevery, aes(x = hour, y=TregCT), linetype = "dashed", colour = "black", lwd = lineKO)+
theme(panel.background = element_rect(fill = "white", colour = "black", size = panelSize),
# legend.key = element_rect(fill = "white", colour = "black"),
# legend.background = (element_rect(colour= "black", fill = "white")),
axis.title.x = element_text( colour="black", size=xAxisSize),
axis.title.y = element_text( colour = "black", size = yAxisSize),
plot.title = element_text(lineheight=.8,  size = TitleSize),
axis.ticks.length=unit(.25, "cm"),
text = element_text(size=tixkSize))+
labs(titles = "Treg death rate", x = "Age in days", y = "Cell Counts (log)")+
scale_y_continuous(trans = log2_trans(),
breaks = trans_breaks("log2", function(x) 2^x),
labels = trans_format("log2", math_format(2^.x)))
ggplot() +
geom_line(data=WTevery, aes(x=hour, y=TregCT), lwd = lineWT)+
geom_line(data=KOevery, aes(x = hour, y=TregCT), linetype = "dashed", colour = "black", lwd = lineKO)
WTevery = read.csv("C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/Data/ModelOutputEverythingWT.csv")
KOevery = read.csv("C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/Data/ModelOutputEverythingKO.csv")
WTevery$hour = 1:nrow(WTevery)/24
KOevery$hour = 1:nrow(KOevery)/24
WTevery$TregCT
lineWT = 2
lineKO = 2
panelSize = 2
xAxisSize = 20
yAxisSize = 30
TitleSize = 30
tixkSize = 30
ggplot() +
geom_line(data=WTevery, aes(x=hour, y=TregCT), lwd = lineWT)+
geom_line(data=KOevery, aes(x = hour, y=TregCT), linetype = "dashed", colour = "black", lwd = lineKO)+
theme(panel.background = element_rect(fill = "white", colour = "black", size = panelSize),
# legend.key = element_rect(fill = "white", colour = "black"),
# legend.background = (element_rect(colour= "black", fill = "white")),
axis.title.x = element_text( colour="black", size=xAxisSize),
axis.title.y = element_text( colour = "black", size = yAxisSize),
plot.title = element_text(lineheight=.8,  size = TitleSize),
axis.ticks.length=unit(.25, "cm"),
text = element_text(size=tixkSize))+
labs(titles = "Treg death rate", x = "Age in days", y = "Cell Counts (log)")+
scale_y_continuous(trans = log2_trans(),
breaks = trans_breaks("log2", function(x) 2^x),
labels = trans_format("log2", math_format(2^.x)))
TotalTreg = ggplot() +
geom_line(data=WTevery, aes(x=hour, y=TregCT), lwd = lineWT)+
geom_line(data=KOevery, aes(x = hour, y=TregCT), linetype = "dashed", colour = "black", lwd = lineKO)+
theme(panel.background = element_rect(fill = "white", colour = "black", size = panelSize),
# legend.key = element_rect(fill = "white", colour = "black"),
# legend.background = (element_rect(colour= "black", fill = "white")),
axis.title.x = element_text( colour="black", size=xAxisSize),
axis.title.y = element_text( colour = "black", size = yAxisSize),
plot.title = element_text(lineheight=.8,  size = TitleSize),
axis.ticks.length=unit(.25, "cm"),
text = element_text(size=tixkSize))+
labs(titles = "Total Tregs", x = "Age in days", y = "Cell Counts (log)")+
scale_y_continuous(trans = log2_trans(),
breaks = trans_breaks("log2", function(x) 2^x),
labels = trans_format("log2", math_format(2^.x)))
ggplot() +
geom_line(data=WTevery, aes(x=hour, y=TregCT), lwd = lineWT)+
geom_line(data=KOevery, aes(x = hour, y=TregCT), linetype = "dashed", colour = "black", lwd = lineKO)+
theme(panel.background = element_rect(fill = "white", colour = "black", size = panelSize),
# legend.key = element_rect(fill = "white", colour = "black"),
# legend.background = (element_rect(colour= "black", fill = "white")),
axis.title.x = element_text( colour="black", size=xAxisSize),
axis.title.y = element_text( colour = "black", size = yAxisSize),
plot.title = element_text(lineheight=.8,  size = TitleSize),
axis.ticks.length=unit(.25, "cm"),
text = element_text(size=tixkSize))+
labs(titles = "Total Tregs", x = "Age in days", y = "Cell Counts (log)")+
scale_y_continuous(trans = log2_trans(),
breaks = trans_breaks("log2", function(x) 2^x),
labels = trans_format("log2", math_format(2^.x)))
library("ggplot2")
library(ggplot2)
library(MASS)
library(scales)
library(ggpubr)
WTevery = read.csv("C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/Data/ModelOutputEverythingWT.csv")
KOevery = read.csv("C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/Data/ModelOutputEverythingKO.csv")
WTevery$hour = 1:nrow(WTevery)/24
KOevery$hour = 1:nrow(KOevery)/24
lineWT = 2
lineKO = 2
panelSize = 2
xAxisSize = 20
yAxisSize = 30
TitleSize = 30
tixkSize = 30
TregLoss = ggplot() +
geom_line(data=WTevery, aes(x=hour, y=TregLoss), lwd = lineWT)+
geom_line(data=KOevery, aes(x = hour, y=TregLoss), linetype = "dashed", colour = "black", lwd = lineKO)+
theme(panel.background = element_rect(fill = "white", colour = "black", size = panelSize),
# legend.key = element_rect(fill = "white", colour = "black"),
# legend.background = (element_rect(colour= "black", fill = "white")),
axis.title.x = element_text( colour="black", size=xAxisSize),
axis.title.y = element_text( colour = "black", size = yAxisSize),
plot.title = element_text(lineheight=.8,  size = TitleSize),
axis.ticks.length=unit(.25, "cm"),
text = element_text(size=tixkSize))+
labs(titles = "Treg death rate", x = "Age in days", y = "Cell Counts (log)")+
scale_y_continuous(trans = log2_trans(),
breaks = trans_breaks("log2", function(x) 2^x),
labels = trans_format("log2", math_format(2^.x)))
#------------------------------------------------------------------------
#                             Proliferation
#------------------------------------------------------------------------
TregProl = ggplot(data=WTevery, aes(x=hour, y=ProlTregs)) +
geom_line(lwd = lineWT)+
geom_line(data = KOevery, aes(x = hour, y=ProlTregs), linetype = "dashed", colour = "black", lwd = lineKO)+
# scale_y_continuous(limits = c(0,30))
theme(panel.background = element_rect(fill = "white", colour = "black", size = panelSize),
legend.key = element_rect(fill = "white", colour = "black"),
legend.background = (element_rect(colour= "black", fill = "white")),
axis.title.x = element_text( colour="black", size=xAxisSize),
axis.title.y = element_text( colour = "black", size = yAxisSize),
plot.title = element_text(lineheight=.8,  size = TitleSize),
axis.ticks.length=unit(.25, "cm"),
text = element_text(size=tixkSize))+
labs(titles = "Proliferating Tregs", x = "Age in days", y = "Cell count (log)")+
scale_y_continuous(trans = log2_trans(),
breaks = trans_breaks("log2", function(x) 2^x),
labels = trans_format("log2", math_format(2^.x)))
TotalTreg = ggplot() +
geom_line(data=WTevery, aes(x=hour, y=TregCT), lwd = lineWT)+
geom_line(data=KOevery, aes(x = hour, y=TregCT), linetype = "dashed", colour = "black", lwd = lineKO)+
theme(panel.background = element_rect(fill = "white", colour = "black", size = panelSize),
# legend.key = element_rect(fill = "white", colour = "black"),
# legend.background = (element_rect(colour= "black", fill = "white")),
axis.title.x = element_text( colour="black", size=xAxisSize),
axis.title.y = element_text( colour = "black", size = yAxisSize),
plot.title = element_text(lineheight=.8,  size = TitleSize),
axis.ticks.length=unit(.25, "cm"),
text = element_text(size=tixkSize))+
labs(titles = "Total Tregs", x = "Age in days", y = "Cell Counts (log)")+
scale_y_continuous(trans = log2_trans(),
breaks = trans_breaks("log2", function(x) 2^x),
labels = trans_format("log2", math_format(2^.x)))
TregDys = ggarrange(TregLoss, TregProl, TotalTreg,
ncol = 3, nrow = 1,
labels = c("A", "B"),
font.label = list(size = 30))
ggsave(file = "C:/Laptop Backups/HomestaticExpansionProject/Figures/Dissertation/Figure 12 -Exploring Early Treg dysregulation/TregDys.png",
TregDys,
height = 8,
width = 18)
ggsave(file = "C:/Laptop Backups/HomestaticExpansionProject/Figures/Dissertation/Figure 12 -Exploring Early Treg dysregulation/TregDys.png",
TregDys,
height = 6,
width = 18)
TregDys = ggarrange(TotalTreg, TregLoss, TregProl,
ncol = 3, nrow = 1,
labels = c("A", "B", "C"),
font.label = list(size = 30))
TregDys = ggarrange(TotalTreg, TregLoss, TregProl,
ncol = 3, nrow = 1,
labels = c("A", "B", "C"),
font.label = list(size = 30))
ggsave(file = "C:/Laptop Backups/HomestaticExpansionProject/Figures/Dissertation/Figure 12 -Exploring Early Treg dysregulation/TregDys.png",
TregDys,
height = 6,
width = 18)
22 + 13
ActTCD4CTKO[TregDys]
ActTCD4CTKO$data
colnames(ActTCD4CTKO)
ActTCD4CTKO
ModeldataKO$NaiveCT
BiocManager::install("GenomicFeatures")
install.packages("BiocManager")
install.Rtools(check = TRUE, check_r_update = TRUE, GUI = TRUE, ...)
install.packages("Rtools")
install.Rtools(check = TRUE, check_r_update = TRUE, GUI = TRUE)
install("installr")
BiocManager::install("GenomicFeatures")
BiocManager::install("GenomicFeatures")
library(GenomicFeatures)
? makeTxDbFromGFF
setwd("C:/Users/jonan/Documents/Tyseq/Code")
txdb <- makeTxDbFromGFF("../Data/hg19/gencode.v19.metadata.HGNC.gz")
txdb <- makeTxDbFromGFF("../Data/hg19/gencode.v19.metadata.HGNC")
txdb <- makeTxDbFromGFF("../Data/hg19/gencode.v19.chr_patch_hapl_scaff.annotation.gtf")
head(txdb)
head(txdb)
txdb <- makeTxDbFromGFF("../Data/hg19/gencode.v19.chr_patch_hapl_scaff.annotation.gtf")
head(txdb)
keys(txdb)
txdb
keytypes(txdb)
k <- keys(txdb, keytype = "TXNAME")
tx2gene <- select(txdb, k, "GENEID", "TXNAME")
tx2gene
tx2gene <- select(txdb, k, "GENEID", "TXID")
keytypes(txdb)
k <- keys(txdb, keytype = "TXID")
tx2gene <- select(txdb, k, "GENEID", "TXID")
tx2gene
k <- keys(txdb, keytype = "TXNAME")
tx2gene <- select(txdb, k, "GENEID", "TXNAME")
tx2gene
install.packages("tximport")
BiocManager::install("tximport") #needed to prepare the data for deseq
BiocManager::install("DESeq2") #for differential gene expression analysis
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
# Generating the tx2gene
library(GenomicFeatures)
#You have to set the working dyrectory to where the code is at
txdb <- makeTxDbFromGFF("../Data/hg19/gencode.v19.chr_patch_hapl_scaff.annotation.gtf")
keytypes(txdb)
k <- keys(txdb, keytype = "TXNAME")
tx2gene <- select(txdb, k, "GENEID", "TXNAME")
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/jonan/Documents/Tyseq/Code/") #All file locations will have a relative directionality in the file tree.
# Creating a sample table that maps each sample to its corresponding quant.sf file
sample_table <- data.frame(
sampleName = c("XIN460_C", "XGM061_C", "XJL334_C", "ZCA126_C", "XGZ492_C",
"AAFS251_D", "AAJ2482_D", "AABW178_D", "XIX456_D", "ABDG032_D"),
fileName = c(control_files, T1D_files),
diabetes_status = c(rep("No", 5), rep("Yes", 5))
)
# Setting up files for upload
# "../Data/SalmonQuant/quantALL/"
control_files = c("../Data/SalmonQuant/quantALL/1_XIN460_NHI_ATTACT_L005_R1_001_quant.sf",
"../Data/SalmonQuant/quantALL/2_XGM061_NHI_TCCGGA_L005_R1_001_quant.sf",
"../Data/SalmonQuant/quantALL/3_XJL334_NHI_CGCTCA_L005_R1_001_quant.sf",
"../Data/SalmonQuant/quantALL/4_ZCA126_NHI_GAGATT_L005_R1_001_quant.sf",
"../Data/SalmonQuant/quantALL/5_XGZ492_NHI_ATTCAG_L005_R1_001_quant.sf")
T1D_files = c("../Data/SalmonQuant/quantALL/6_AAFS251_T2DHI_GAATTC_L005_R1_001_quant.sf",
"../Data/SalmonQuant/quantALL/7_AAJ2482_T2DHI_CTGAAG_L005_R1_001_quant.sf",
"../Data/SalmonQuant/quantALL/8_AABW178_T2DHI_TAATGC_L005_R1_001_quant.sf",
"../Data/SalmonQuant/quantALL/9_XIX456_T2DHI_CGGCTA_L005_R1_001_quant.sf",
"../Data/SalmonQuant/quantALL/10_ABDG032_T2DHI_TCCGCG_L005_R1_001_quant.sf")
# Creating a sample table that maps each sample to its corresponding quant.sf file
sample_table <- data.frame(
sampleName = c("XIN460_C", "XGM061_C", "XJL334_C", "ZCA126_C", "XGZ492_C",
"AAFS251_D", "AAJ2482_D", "AABW178_D", "XIX456_D", "ABDG032_D"),
fileName = c(control_files, T1D_files),
diabetes_status = c(rep("No", 5), rep("Yes", 5))
)
sample_table$diabetes_status
sample_table$diabetes_status[1]
sample_table$sampleName[1]
sample_table$sampleName[6]
sample_table$fileName[6]
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/jonan/Documents/Tyseq/Code/") #All file locations will have a relative directionality in the file tree.
library(tximport)
library(DESeq2)
txi <- tximport(files = sample_table$fileName, type = salmon, tx2gene = tx2gene)
txi <- tximport(files = sample_table$fileName, type = "salmon", tx2gene = tx2gene)
# Generating the tx2gene
library(GenomicFeatures)
#You have to set the working directory to where the code is at
txdb <- makeTxDbFromGFF("../Data/hg19/gencode.v19.chr_patch_hapl_scaff.annotation.gtf")
keytypes(txdb)
k <- keys(txdb, keytype = "TXNAME")
tx2gene <- select(txdb, k, "TXNAME", "GENEID")
k <- keys(txdb, keytype = "TXNAME")
tx2gene <- select(txdb, k, "TXNAME", "GENEID")
tx2gene <- select(txdb, k, "GENEID", "TXNAME")
tx2gene <- as.data.frame(tx2gene)
tx2gene <- tx2gene[, c("TXNAME", "GENEID")]
txi <- tximport(files = sample_table$fileName, type = "salmon", tx2gene = tx2gene)
head(tx2gene)
head(tx2gene)
txi <- tximport(files = sample_table$fileName, type = "salmon", tx2gene = tx2gene, ignoreTxVersion = TRUE)
quant <- read.delim("../Data/SalmonQuant/quantALL/1_XIN460_NHI_ATTACT_L005_R1_001_quant.sf", stringsAsFactors = FALSE)
head(quant)
if (is_present) {
print("Transcript ID is present in tx2gene mapping.")
} else {
print("Transcript ID is not found in tx2gene mapping.")
}
is_present <- transcript_id %in% tx2gene$TXNAME
if (is_present) {
print("Transcript ID is present in tx2gene mapping.")
} else {
print("Transcript ID is not found in tx2gene mapping.")
}
is_present <- transcript_id %in% tx2gene$TXNAME
transcript_id <- "ENST00000335137.3"
is_present <- transcript_id %in% tx2gene$TXNAME
if (is_present) {
print("Transcript ID is present in tx2gene mapping.")
} else {
print("Transcript ID is not found in tx2gene mapping.")
}
txi <- tximport(files = sample_table$fileName, type = "salmon")
txi <- tximport(files = sample_table$fileName, type = "salmon")
txi <- tximport(files = sample_table$fileName, type = "salmon", tx2gene = tx2gene)
txi <- tximport(files = sample_table$fileName, type = "salmon", tx2gene = tx2gene, ignoreAfterBar = TRUE)
txi
head(txi)
counts <- txi$counts
columnData <- data.frame(conditions = sample_table$diabetes_status)
dds <- DESeqDataSetFromMatrix(countData = counts, coldData = columnData, design = ~condition)
columnData
dds <- DESeqDataSetFromMatrix(countData = counts, coldData = columnData, design = ~condition)
counts
counts <- txi$counts
counts
counts <- txi$counts
counts
dds <- DESeqDataSetFromMatrix(countData = counts, coldData = columnData, design = ~condition) # ~condition is what tells it that I am interested in seeing the relationships based on condition
dds <- DESeqDataSetFromMatrix(countData = counts, colData = columnData, design = ~condition) # ~condition is what tells it that I am interested in seeing the relationships based on condition
counts <- round(txi$counts)
dds <- DESeqDataSetFromMatrix(countData = counts, colData = columnData, design = ~condition) # ~condition is what tells it that I am interested in seeing the relationships based on condition
dds <- DESeqDataSetFromMatrix(countData = counts, colData = columnData, design = ~diabetes_status) # ~condition is what tells it that I am interested in seeing the relationships based on condition
columnData <- data.frame(condition = sample_table$diabetes_status)
dds <- DESeqDataSetFromMatrix(countData = counts, colData = columnData, design = ~condition) # ~condition is what tells it that I am interested in seeing the relationships based on condition
dds

# Create a new column to indicate significance based on adjusted p-value
results$significant <- ifelse(results$padj <= pvalue_cutoff, "Yes", "No")
# Create the volcano plot with interactive tooltips for Ensemble ID
volcano_plot <- plot_ly(data = results, x = ~log2FoldChange, y = ~-log10(padj),
color = ~significant, colors = list("Yes" = "red", "No" = "black")) %>%
add_markers(size = 5, alpha = 0.6, hoverinfo = "text",
text = ~paste("Ensemble ID: ", EnsembleID, "<br>",
"log2 Fold Change: ", log2FoldChange, "<br>",
"Adjusted p-value: ", padj)) %>%
layout(xaxis_title = "log2 Fold Change",
yaxis_title = "-log10(Adjusted p-value)",
title = "Volcano Plot",
hovermode = "closest")
plot_ly(data = results, x = ~log2FoldChange, y = ~-log10(padj),
color = ~significant, colors = list("Yes" = "red", "No" = "black")) %>%
add_markers(size = 5, alpha = 0.6, hoverinfo = "text",
text = ~paste("Ensemble ID: ", EnsembleID, "<br>",
"log2 Fold Change: ", log2FoldChange, "<br>",
"Adjusted p-value: ", padj))
plot_ly(data = results, x = ~log2FoldChange, y = ~-log10(padj),
add_markers(size = 5, alpha = 0.6, hoverinfo = "text",
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/jonan/Documents/Tyseq/Code/") #All file locations will have a relative directionality in the file tree.
library(tximport) # Importing salmon files and preparing for deseq
library(DESeq2) # DGE Analysis
library(GenomicFeatures) # Generating the tx2gene
library(ggplot2)
txdb <- makeTxDbFromGFF("../Data/hg19/gencode.v19.chr_patch_hapl_scaff.annotation.gtf")
# keytypes(txdb)
k <- keys(txdb, keytype = "TXNAME")
tx2gene <- select(txdb, k, "GENEID", "TXNAME")
tx2gene <- as.data.frame(tx2gene)
tx2gene <- tx2gene[, c("TXNAME", "GENEID")]
# Results generated in Data Prep
results_df <- as.data.frame(results)
# Calculate the negative log10 of the adjusted p-values
results_df$neg_log10_padj <- -log10(results_df$padj)
# Create a volcano plot
ggplot(results_df, aes(x = log2FoldChange, y = neg_log10_padj)) +
geom_point(color = "grey", alpha = 0.6) +
geom_point(data = subset(results_df, padj < 0.05 & abs(log2FoldChange) > 1),
color = "red", alpha = 0.6) +
geom_vline(xintercept = c(-1, 1), linetype = "dashed", color = "blue") +
geom_hline(yintercept = -log10(0.05), linetype = "dashed", color = "blue") +
labs(x = "log2 Fold Change", y = "-log10(adjusted p-value)",
title = "Volcano Plot") +
theme_bw()
tximport
version(tximport)
tximport
packageVersion(tximport)
library(tximport) # Importing salmon files and preparing for deseq
packageVersion("tximport")
packageVersion("DESeq2")
View(results)
head(results)
results_clean <- resutls %>% drop_na(results$log2FoldChange, results$padj)
library(dplyr)
results_clean <- resutls %>% drop_na(results$log2FoldChange, results$padj)
library(tidyr)
results_clean <- resutls %>% drop_na(results$log2FoldChange, results$padj)
results_clean <- results %>% drop_na(log2FoldChange, padj)
results_clean
install.packages("tidyverse")
library(tidyverse)
# Creating a new dataframe with the necessary columns
dfGSEA <- results_clean %>%
rownames_to_column(var = "Gene_names") %>%
select(Gene_names, log2FC = log2FoldChange, padj)
head(dfGSEA)
# Creating a new dataframe with the necessary columns
dfGSEA <- results_clean %>%
rownames_to_column(var = "Gene_names") %>%
select(Gene_names, log2FC = log2FoldChange, padj, rank)
results_clean
# Removing rows with na values in them
results_clean <- results %>% drop_na(log2FoldChange, padj)
# Calculating gene rankings
results_clean <- results_clean %>% mutate(rank = log2FoldChange * -log10(padj))
# Creating a new dataframe with the necessary columns
dfGSEA <- results_clean %>%
rownames_to_column(var = "Gene_names") %>%
select(Gene_names, log2FC = log2FoldChange, padj, rank)
install.packages("fgsea")
install.packages('fgsea')
install.packages('fgsea')
library(fgsea)
BiocManager::install("fgsea")
library(fgsea)
go <- gmtPathways("C:/Users/jonan/Documents/Tyseq/Data/c5.go.bp.v2023.1.Hs.symbols.gmt")
go
install.packages("biomaRt")
install.packages("biomaRt")
install.packages("biomaRt")
install.packages("biomaRt")
BiocManager::install("biomaRt")
library(biomaRt)
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/jonan/Documents/Tyseq/Code/") #All file locations will have a relative directionality in the file tree.
library(tximport) # Importing salmon files and preparing for deseq
library(DESeq2) # DGE Analysis
library(GenomicFeatures) # Generating the tx2gene
library(ggplot2)
library(tidyr)
library(tidyverse)
library(fgsea) # pathway enrichment analysis
library(biomaRt) # Converting ensembleID to geneID
?? useEnsembl
# Set up the connection to the Ensembl database
ensembl <- useEnsembl(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
# Set up the connection to the Ensembl database
ensembl <- useEnsembl(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
# Query the Ensembl database to retrieve the gene symbol
gene_symbol <- getBM(attributes = c("ensembl_gene_id", "external_gene_name"),
filters = "ensembl_gene_id",
values = "ENSG00000000003.10",
mart = ensembl)
# Print the gene symbol
print(gene_symbol)
# Query the Ensembl database to retrieve the gene symbol
gene_symbol <- getBM(attributes = c("ensembl_gene_id", "external_gene_name"),
filters = "ensembl_gene_id",
values = "ENSG00000000003",
mart = ensembl)
# Print the gene symbol
print(gene_symbol)
dfGSEA
class(dfGSEA)
results
# Removing rows with na values in them
results_clean <- results %>% drop_na(log2FoldChange, padj)
# Calculating gene rankings
results_clean <- results_clean %>% mutate(rank = log2FoldChange * -log10(pvalue))
# Creating a new dataframe with the necessary columns
dfGSEA <- results_clean %>%
rownames_to_column(var = "Gene_names") %>%
select(Gene_names, log2FC = log2FoldChange, pvalue, rank)
dfGSEA
print(gene_symbol)
go$GOBP_MITOCHONDRIAL_GENOME_MAINTENANCE
# Removing rows with na values in them
results_clean <- results %>% drop_na(log2FoldChange, pvalue)
# Calculating gene rankings
results_clean <- results_clean %>% mutate(rank = log2FoldChange * -log10(pvalue))
# Creating a new dataframe with the necessary columns
dfGSEA <- results_clean %>%
rownames_to_column(var = "Gene_names") %>%
select(Gene_names, log2FC = log2FoldChange, pvalue, rank)
dfGSEA
# removing the version numbers from gene name
# dfGSEA$Gene_names <- gsub("\\.\\")
gsub("\\.\\d+$", "", ENSG00000000003.10)
gsub("\.\d+$", "", ENSG00000000003.10)
gsub("\\.\d+$", "", ENSG00000000003.10)
gsub("\\.d+$", "", ENSG00000000003.10)
\
gsub("\\.\\d+$", "", ENSG00000000003.10)
gsub("\\.\\d+$", "", "ENSG00000000003.10")
gsub("\\.\\d+$", "", "ENSG00000000003.1787890")
gsub("\.\\d+$", "", "ENSG00000000003.1787890")
gsub("\\.\d+$", "", "ENSG00000000003.1787890")
gsub("\\.\\d+$", "", "ENSG00000000003.1787890")
?? gsub
? gsub
gsub("\\.\\d+$", "fuck", "ENSG00000000003.1787890")
gsub("\\.\\d+$", "", "ENSG00000000003.1787890")
# removing the version numbers from gene name
dfGSEA$Gene_names <- gsub("\\.\\d+$", "", dfGSEA$Gene_names)
dfGSEA
# Set up the connection to the Ensembl database
ensembl <- useEnsembl(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
# Vectorized approach: Retrieve gene symbols for all ensemble IDs in the dataframe
dfGSEA$Gene_symbols <- sapply(dfGSEA$Gene_names, function(ensembl_id) {
gene_symbol <- getBM(attributes = "external_gene_name",
filters = "ensembl_gene_id",
values = ensembl_id,
mart = ensembl)
return(gene_symbol)
})
# Query the Ensembl database to retrieve the gene symbol
gene_symbol <- getBM(attributes = c("ensembl_gene_id", "external_gene_name"),
filters = "ensembl_gene_id",
values = "ENSG00000000003",
mart = ensembl)
dfGSEA
# Set up the connection to the Ensembl database
ensembl <- useEnsembl(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
# Batch processing: Retrieve gene symbols for all ensemble IDs in one call
gene_symbols <- getBM(attributes = c("ensembl_gene_id", "external_gene_name"),
filters = "ensembl_gene_id",
values = dfGSEA$Gene_names,
mart = ensembl)
# Merge the retrieved gene symbols back to the dfGSEA dataframe
dfGSEA$Gene_symbols <- gene_symbols$external_gene_name
gene_symbols
# Merge the gene symbols into the original dfGSEA dataframe based on ensemble IDs
dfGSEA <- merge(dfGSEA, gene_symbols, by.x = "Gene_names", by.y = "ensembl_gene_id", all.x = TRUE)
# Rename the merged column to "Gene_symbols"
colnames(dfGSEA)[colnames(dfGSEA) == "external_gene_name"] <- "Gene_symbols"
dfGSEA
View(dfGSEA)
# Query the Ensembl database to retrieve the gene symbol
gene_symbol <- getBM(attributes = c("ensembl_gene_id", "external_gene_name"),
filters = "ensembl_gene_id",
values = "ENSG00000150165",
mart = ensembl)
# Query the Ensembl database to retrieve the gene symbol
gene_symbol <- getBM(attributes = c("ensembl_gene_id", "external_gene_name"),
filters = "ensembl_gene_id",
values = "ENSG00000150165",
mart = ensembl)
# Query the Ensembl database to retrieve the gene symbol
gene_symbol <- getBM(attributes = c("ensembl_gene_id", "external_gene_name"),
filters = "ensembl_gene_id",
values = "ENSG00000234298",
mart = ensembl)
# Extracting the na entries in Gene_symbols
dfEmptySymbols <- subset(dfGSEA, is.na(Gene_symbols) | Gene_symbol == "")
# Extracting the na entries in Gene_symbols
dfEmptySymbols <- subset(dfGSEA, is.na(Gene_symbols) | Gene_symbols == "")
view(dfEmptySymbols)
view(dfGSEA)
# Removing empty and NA genesymbol entries
dfGSEA <- subset(dfGSEA, !(is.na(Gene_symbols) | Gene_symbols == ""))
dfGSEA
dfGSEA
dfGSEA$rank
# Extract gene rank and list in decreasing order for GSEA
ranks <- as.numeric(dfGSEA$rank)
names(ranks) <- dfGSEA$`Gene names`
ranks <- sort(ranks, decreasing=TRUE)
ranks[1:30]
ranks
names(ranks)
dfGSEA$Gene_names
dfGSEA$Gene_symbols
names(ranks) <- dfGSEA$Gene_symbols
ranks <- sort(ranks, decreasing=TRUE)
ranks[1:30]
names(ranks)
ranks[1:30]
class(ranks)
? names
class ranks
class(ranks)
ranks[1:30]
go <- gmtPathways("C:/Users/jonan/Documents/Tyseq/Data/c5.go.v2023.1.Hs.symbols.gmt")
set.seed(06212022)
fgseaRes <- fgsea(pathways = go,
stats = ranks,
minSize=6,
maxSize=500,
nproc=1)
fgseaRes
a <- sort(fgseaRes$pval, decreasing=TRUE)
a
a <- sort(fgseaRes$pval, decreasing=FALSE)
a
fgseaRes <- fgseaRes[order(fgseaRes$pval), ]
fgseaRes
ranks[1:30]
colnames(fgseaRes)
#Saving the results
write.csv("C:/Users/jonan/Documents/Tyseq/Data/fgseaResults.csv")
#Saving the results
write.csv(fgseaRes, "C:/Users/jonan/Documents/Tyseq/Data/fgseaResults.csv")
fgseaRes
#Saving the results
write.csv(fgseaRes, "C:/Users/jonan/Documents/Tyseq/Data/fgseaResults.csv")
#
fgseaRes <- fgseaRes[order(fgseaRes$pval), ]
#Saving the results
write.csv(fgseaRes, "C:/Users/jonan/Documents/Tyseq/Data/fgseaResults.csv")
#
fgseaRes <- fgseaRes[order(fgseaRes$pval), ]
#Saving the results
write.csv(fgseaRes, "C:/Users/jonan/Documents/Tyseq/Data/fgseaResults.csv")
fgseaRes
sapply(fgseaRes, class)
View(fgseaRes)
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/jonan/Documents/Tyseq/Code/") #All file locations will have a relative directionality in the file tree.
library(tximport) # Importing salmon files and preparing for deseq
library(DESeq2) # DGE Analysis
library(GenomicFeatures) # Generating the tx2gene
library(ggplot2)
library(tidyr)
library(tidyverse)
library(fgsea) # pathway enrichment analysis
library(biomaRt) # Converting ensembleID to geneID
fwrite(fgseaRes, file="C:/Users/jonan/Documents/Tyseq/Data/fgseaResults.csv", sep="\t", sep2=c("", " ", ""))
library("data.table")
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/jonan/Documents/Tyseq/Code/") #All file locations will have a relative directionality in the file tree.
library(tximport) # Importing salmon files and preparing for deseq
library(DESeq2) # DGE Analysis
library(GenomicFeatures) # Generating the tx2gene
library(ggplot2)
library(tidyr)
library(tidyverse)
library(fgsea) # pathway enrichment analysis
library(biomaRt) # Converting ensembleID to geneID
library(data.table)
fwrite(fgseaRes, file="C:/Users/jonan/Documents/Tyseq/Data/fgseaResults.csv", sep="\t", sep2=c("", " ", ""))
fgseaRes
fgseaRes <- fgsea(pathways = go,
stats = ranks,
minSize=6,
maxSize=500,
nproc=1)
ranks
results
results_clean
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/jonan/Documents/Tyseq/Code/") #All file locations will have a relative directionality in the file tree.
library(tximport) # Importing salmon files and preparing for deseq
library(DESeq2) # DGE Analysis
library(GenomicFeatures) # Generating the tx2gene
library(ggplot2)
library(tidyr)
library(tidyverse)
library(fgsea) # pathway enrichment analysis
library(biomaRt) # Converting ensembleID to geneID
library(data.table)
txdb <- makeTxDbFromGFF("../Data/hg19/gencode.v19.chr_patch_hapl_scaff.annotation.gtf")
# keytypes(txdb)
k <- keys(txdb, keytype = "TXNAME")
tx2gene <- select(txdb, k, "GENEID", "TXNAME")
tx2gene <- as.data.frame(tx2gene)
tx2gene <- tx2gene[, c("TXNAME", "GENEID")]
# Setting up files for upload
# "../Data/SalmonQuant/quantALL/"
control_files = c("../Data/SalmonQuant/quantALL/1_XIN460_NHI_ATTACT_L005_R1_001_quant.sf",
"../Data/SalmonQuant/quantALL/2_XGM061_NHI_TCCGGA_L005_R1_001_quant.sf",
"../Data/SalmonQuant/quantALL/3_XJL334_NHI_CGCTCA_L005_R1_001_quant.sf",
"../Data/SalmonQuant/quantALL/4_ZCA126_NHI_GAGATT_L005_R1_001_quant.sf",
"../Data/SalmonQuant/quantALL/5_XGZ492_NHI_ATTCAG_L005_R1_001_quant.sf")
T1D_files = c("../Data/SalmonQuant/quantALL/6_AAFS251_T2DHI_GAATTC_L005_R1_001_quant.sf",
"../Data/SalmonQuant/quantALL/7_AAJ2482_T2DHI_CTGAAG_L005_R1_001_quant.sf",
"../Data/SalmonQuant/quantALL/8_AABW178_T2DHI_TAATGC_L005_R1_001_quant.sf",
"../Data/SalmonQuant/quantALL/9_XIX456_T2DHI_CGGCTA_L005_R1_001_quant.sf",
"../Data/SalmonQuant/quantALL/10_ABDG032_T2DHI_TCCGCG_L005_R1_001_quant.sf")
# Creating a sample table that maps each sample to its corresponding quant.sf file
# _C = control
# _D = Diabetic
sample_table <- data.frame(
sampleName = c("XIN460_C", "XGM061_C", "XJL334_C", "ZCA126_C", "XGZ492_C",
"AAFS251_D", "AAJ2482_D", "AABW178_D", "XIX456_D", "ABDG032_D"),
fileName = c(control_files, T1D_files),
diabetes_status = c(rep("No", 5), rep("Yes", 5))
)
# Setting up files for upload
# "../Data/SalmonQuant/quantALL/"
control_files = c("../Data/SalmonQuant/quantALL/1_XIN460_NHI_ATTACT_L005_R1_001_quant.sf",
"../Data/SalmonQuant/quantALL/2_XGM061_NHI_TCCGGA_L005_R1_001_quant.sf",
"../Data/SalmonQuant/quantALL/3_XJL334_NHI_CGCTCA_L005_R1_001_quant.sf",
"../Data/SalmonQuant/quantALL/4_ZCA126_NHI_GAGATT_L005_R1_001_quant.sf",
"../Data/SalmonQuant/quantALL/5_XGZ492_NHI_ATTCAG_L005_R1_001_quant.sf")
T1D_files = c("../Data/SalmonQuant/quantALL/6_AAFS251_T2DHI_GAATTC_L005_R1_001_quant.sf",
"../Data/SalmonQuant/quantALL/7_AAJ2482_T2DHI_CTGAAG_L005_R1_001_quant.sf",
"../Data/SalmonQuant/quantALL/8_AABW178_T2DHI_TAATGC_L005_R1_001_quant.sf",
"../Data/SalmonQuant/quantALL/9_XIX456_T2DHI_CGGCTA_L005_R1_001_quant.sf",
"../Data/SalmonQuant/quantALL/10_ABDG032_T2DHI_TCCGCG_L005_R1_001_quant.sf")
# Creating a sample table that maps each sample to its corresponding quant.sf file
# _C = control
# _D = Diabetic
sample_table <- data.frame(
sampleName = c("XIN460_C", "XGM061_C", "XJL334_C", "ZCA126_C", "XGZ492_C",
"AAFS251_D", "AAJ2482_D", "AABW178_D", "XIX456_D", "ABDG032_D"),
fileName = c(control_files, T1D_files),
diabetes_status = c(rep("No", 5), rep("Yes", 5))
)
tximport
? tximport
# import salmon abundance counts into an r data ckass that can be used by desseq
txi <- tximport(files = sample_table$fileName, type = "salmon", tx2gene = tx2gene, ignoreAfterBar = TRUE)
counts <- round(txi$counts)
columnData <- data.frame(condition = sample_table$diabetes_status)
dds <- DESeqDataSetFromMatrix(countData = counts, colData = columnData, design = ~condition) # ~condition is what tells it that I am interested in seeing the relationships based on condition
#Adding the right column names to the dds object
colnames(dds) <- sample_table$sampleName
# dds$condition - These should match with colnames(dds); they do.
## Normalizing the counts
# Estimated size factors are determined by the library size
dds <- estimateSizeFactors(dds)
# Differential gene expression analysis
dds <- DESeq(dds)
# Getting the results based on the condition of diabetes or not
results <- results(dds, contrast = c("condition", "Yes", "No"))
#Adding the Gene names to the results
# Extract gene names from tx2gene object based on EnsembleIDs in the results dataframe
gene_names <- select(tx2gene, keys = rownames(results), columns = "GENEID")$GENEID
# Extract gene names from tx2gene object based on EnsembleIDs in the results dataframe
gene_names <- dplyr::select(tx2gene, keys = rownames(results), columns = "GENEID")$GENEID
print(str(tx2gene))
# Extract gene names from tx2gene object based on EnsembleIDs in the results dataframe
gene_names <- dplyr::select(tx2gene, keys = rownames(results), columns = "GENEID")$GENEID
# Extract gene names from tx2gene object based on EnsembleIDs in the results dataframe
gene_names <- dplyr::select(tx2gene, keys = rownames(results), columns = "GENEID")#$GENEID
print(str(tx2gene))
results
# Get the column names from DESeq object
col_names = colnames(dds)
# Get the patient IDs from the sample table
patient_ids <- sample_table$sampleName
# Compare the column names with the sample name
# If match
match_result <- match(col_names, patient_ids)
match_result
# Print the results
for (i in seq_along(col_names)) {
cat("Column:", col_names[i], " - SampleName ID:", patient_ids[match_result[i]], "\n")
}
results
# Removing rows with na values in them
results_clean <- results %>% drop_na(log2FoldChange, pvalue)
results
# Results generated in Data Prep
results_df <- as.data.frame(results)
# Calculate the negative log10 of the adjusted p-values
results_df$neg_log10_padj <- -log10(results_df$padj)
# Create a volcano plot
ggplot(results_df, aes(x = log2FoldChange, y = neg_log10_padj)) +
geom_point(color = "grey", alpha = 0.6) +
geom_point(data = subset(results_df, padj < 0.05 & abs(log2FoldChange) > 1),
color = "red", alpha = 0.6) +
geom_vline(xintercept = c(-1, 1), linetype = "dashed", color = "blue") +
geom_hline(yintercept = -log10(0.05), linetype = "dashed", color = "blue") +
labs(x = "log2 Fold Change", y = "-log10(adjusted p-value)",
title = "Volcano Plot") +
theme_bw()
# Removing rows with na values in them
results_clean <- results %>% drop_na(log2FoldChange, pvalue)
results
# Removing rows with na values in them
results_clean <- results %>% drop_na(log2FoldChange, pvalue)
# Getting the results based on the condition of diabetes or not
results <- results(dds, contrast = c("condition", "Yes", "No"))
# Getting the results based on the condition of diabetes or not
results <- results(dds, contrast = c("condition", "Yes", "No"))
# Extract gene names from tx2gene object based on EnsembleIDs in the results dataframe
gene_names <- dplyr::select(tx2gene, keys = rownames(results), columns = "GENEID")$GENEID
# Removing rows with na values in them
results_clean <- results %>% drop_na(log2FoldChange, pvalue)
# Extract gene names from tx2gene object based on EnsembleIDs in the results dataframe
gene_names <- dplyr::select(tx2gene, keys = rownames(results), columns = "GENEID")$GENEID
# Extract gene names from tx2gene object based on EnsembleIDs in the results dataframe
gene_names <- select(tx2gene, keys = rownames(results), columns = "GENEID")$GENEID
# Extract gene names from tx2gene object based on EnsembleIDs in the results dataframe
gene_names <- GenomicFeatures::select(tx2gene, keys = rownames(results), columns = "GENEID")$GENEID
class(results)
#Adding the Gene names to the results
results <- as.data.frame(results)
# Extract gene names from tx2gene object based on EnsembleIDs in the results dataframe
gene_names <- select(tx2gene, keys = rownames(results), columns = "GENEID")$GENEID
# Getting the results based on the condition of diabetes or not
results <- results(dds, contrast = c("condition", "Yes", "No"))
# Extract gene names from tx2gene object based on EnsembleIDs in the results dataframe
merged_results <- merge(tx2gene, results, by.x = "TXNAME", by.y = "EnsembleID", all.y = TRUE)
rownames(results)
? select
gene_names <- biomaRt::select(tx2gene, keys = rownames(results), columns = "GENEID")$GENEID
# Getting the results based on the condition of diabetes or not
results <- results(dds, contrast = c("condition", "Yes", "No"))
gene_names <- biomaRt::select(tx2gene, keys = rownames(results), columns = "GENEID")$GENEID
gene_names <- select(tx2gene, keys = rownames(results), columns = "GENEID")$GENEID
tx2gene
# Extract gene names from tx2gene object based on EnsembleIDs in the results dataframe
merged_results <- merge(tx2gene, results, by.x = "TXNAME", by.y = "EnsembleID", all.y = TRUE)
print(str(tx2gene))
colnames(tx2gene)
colnames(results)
results
# Moving rownames to a column
results$EnsembleID <- rownames(results)
# Extract gene names from tx2gene object based on EnsembleIDs in the results dataframe
merged_results <- merge(tx2gene, results, by.x = "TXNAME", by.y = "EnsembleID", all.y = TRUE)
results = as.data.frame(results)
# Extract gene names from tx2gene object based on EnsembleIDs in the results dataframe
merged_results <- merge(tx2gene, results, by.x = "TXNAME", by.y = "EnsembleID", all.y = TRUE)
merged_results
merged_results
merged_results$GENEID
# Getting the results based on the condition of diabetes or not
results <- results(dds, contrast = c("condition", "Yes", "No"))
gene_names <- tximport::select(tx2gene, keys = rownames(results), columns = "GENEID")$GENEID
gene_names <- tidyr::select(tx2gene, keys = rownames(results), columns = "GENEID")$GENEID
gene_names <- tidyverse::select(tx2gene, keys = rownames(results), columns = "GENEID")$GENEID
gene_names <- select(tx2gene, keys = rownames(results), columns = "GENEID")$GENEID
# Getting the results based on the condition of diabetes or not
results <- results(dds, contrast = c("condition", "Yes", "No"))
gene_names <- select(tx2gene, keys = rownames(results), columns = "GENEID")$GENEID
tx2gene
class(tx2gene)
class(results)
tx2gene <- select(txdb, k, "GENEID", "TXNAME")
# keytypes(txdb)
k <- keys(txdb, keytype = "TXNAME")
tx2gene <- select(txdb, k, "GENEID", "TXNAME")
gene_names <- select(tx2gene, keys = rownames(results), columns = "GENEID")$GENEID
class(tx2gene)
class(results)
# keytypes(txdb)
k <- keys(txdb, keytype = "TXNAME")
# keytypes(txdb)
k <- keys(txdb, keytype = "TXNAME")
tx2gene <- select(txdb, k, "GENEID", "TXNAME")
txdb <- makeTxDbFromGFF("../Data/hg19/gencode.v19.chr_patch_hapl_scaff.annotation.gtf")
# keytypes(txdb)
k <- keys(txdb, keytype = "TXNAME")
tx2gene <- select(txdb, k, "GENEID", "TXNAME")
version
